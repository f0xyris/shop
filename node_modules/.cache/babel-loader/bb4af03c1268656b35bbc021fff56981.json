{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCart = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nexport const cartSlice = createSlice({\n  name: 'cartItems',\n  initialState: {\n    cartItems: initialCart\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      let newItem;\n      const itemIndex = state.cartItems.findIndex(({\n        title\n      }) => title === payload.title);\n      const item = state.cartItems[itemIndex]; // if(item) {\n      //     newItem = {\n      //         ...payload,\n      //         count: item.count + 1,\n      //         price: parseInt(item.price) + parseInt(payload.price)\n      //     }\n      // } else {\n      //     newItem = {\n      //         ...payload, \n      //         count: 1\n      //     }\n      // }\n      // if(itemIndex >= 0) {\n      //     return {\n      //         cartItems: [\n      //             ...state.cartItems.slice(0, itemIndex),\n      //             newItem,\n      //             ...state.cartItems.slice(itemIndex + 1)\n      //         ]\n      //     }\n      // }\n\n      if (item) {\n        newItem = {\n          count: item.count + 1,\n          price: parseInt(item.price) + parseInt(payload.price)\n        };\n      }\n\n      let newArray = state.cartItems.slice();\n      newArray.splice(itemIndex, 0, newItem);\n      state.cartItems.push(newItem);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    },\n    delFromCart: (state, {\n      payload\n    }) => {\n      state.cartItems = state.cartItems.filter(({\n        title\n      }) => title !== payload.title);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    }\n  }\n});\nexport const {\n  addToCart,\n  delFromCart\n} = cartSlice.actions;\nexport const showCartItems = state => state.cartItems.cartItems;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/antip/Desktop/study/shop/src/features/cart/cartSlice.js"],"names":["createSlice","initialCart","localStorage","getItem","JSON","parse","cartSlice","name","initialState","cartItems","reducers","addToCart","state","payload","newItem","itemIndex","findIndex","title","item","count","price","parseInt","newArray","slice","splice","push","setItem","stringify","delFromCart","filter","actions","showCartItems","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAChBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADgB,GAEhB,EAFJ;AAIE,OAAO,MAAMG,SAAS,GAAGN,WAAW,CAAC;AACnCO,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAER;AADD,GAFqB;AAKnCS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC7B,UAAIC,OAAJ;AACA,YAAMC,SAAS,GAAGH,KAAK,CAACH,SAAN,CAAgBO,SAAhB,CAA0B,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKJ,OAAO,CAACI,KAAzD,CAAlB;AACA,YAAMC,IAAI,GAAGN,KAAK,CAACH,SAAN,CAAgBM,SAAhB,CAAb,CAH6B,CAK7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAGG,IAAH,EAAS;AACLJ,QAAAA,OAAO,GAAG;AACNK,UAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,GAAa,CADd;AAENC,UAAAA,KAAK,EAAEC,QAAQ,CAACH,IAAI,CAACE,KAAN,CAAR,GAAuBC,QAAQ,CAACR,OAAO,CAACO,KAAT;AAFhC,SAAV;AAKH;;AAED,UAAIE,QAAQ,GAAGV,KAAK,CAACH,SAAN,CAAgBc,KAAhB,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgBT,SAAhB,EAA2B,CAA3B,EAA8BD,OAA9B;AAEAF,MAAAA,KAAK,CAACH,SAAN,CAAgBgB,IAAhB,CAAqBX,OAArB;AAEAZ,MAAAA,YAAY,CAACwB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAef,KAAK,CAACH,SAArB,CAAlC;AAEH,KA3CK;AA4CNmB,IAAAA,WAAW,EAAE,CAAChB,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC/BD,MAAAA,KAAK,CAACH,SAAN,GAAkBG,KAAK,CAACH,SAAN,CAAgBoB,MAAhB,CAAuB,CAAC;AAACZ,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKJ,OAAO,CAACI,KAAtD,CAAlB;AACAf,MAAAA,YAAY,CAACwB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAef,KAAK,CAACH,SAArB,CAAlC;AACH;AA/CK;AALyB,CAAD,CAA7B;AAyDT,OAAO,MAAM;AAACE,EAAAA,SAAD;AAAYiB,EAAAA;AAAZ,IAA2BtB,SAAS,CAACwB,OAA3C;AAGP,OAAO,MAAMC,aAAa,GAAGnB,KAAK,IAAIA,KAAK,CAACH,SAAN,CAAgBA,SAA/C;AAGP,eAAeH,SAAS,CAAC0B,OAAzB","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialCart = localStorage.getItem('cartItems')\r\n  ? JSON.parse(localStorage.getItem('cartItems'))\r\n  : []\r\n\r\n  export const cartSlice = createSlice({\r\n    name: 'cartItems',\r\n    initialState: {\r\n        cartItems: initialCart\r\n    },\r\n    reducers: {\r\n        addToCart: (state, {payload}) => {\r\n            let newItem;\r\n            const itemIndex = state.cartItems.findIndex(({title}) => title === payload.title)\r\n            const item = state.cartItems[itemIndex]\r\n            \r\n            // if(item) {\r\n            //     newItem = {\r\n            //         ...payload,\r\n            //         count: item.count + 1,\r\n            //         price: parseInt(item.price) + parseInt(payload.price)\r\n            //     }\r\n            // } else {\r\n            //     newItem = {\r\n            //         ...payload, \r\n            //         count: 1\r\n            //     }\r\n            // }\r\n\r\n            // if(itemIndex >= 0) {\r\n            //     return {\r\n            //         cartItems: [\r\n            //             ...state.cartItems.slice(0, itemIndex),\r\n            //             newItem,\r\n            //             ...state.cartItems.slice(itemIndex + 1)\r\n            //         ]\r\n            //     }\r\n            // }\r\n            if(item) {\r\n                newItem = {\r\n                    count: item.count + 1,\r\n                    price: parseInt(item.price) + parseInt(payload.price)\r\n                }\r\n\r\n            }\r\n\r\n            let newArray = state.cartItems.slice()\r\n            newArray.splice(itemIndex, 0, newItem)\r\n\r\n            state.cartItems.push(newItem)\r\n            \r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems))\r\n            \r\n        },\r\n        delFromCart: (state, {payload}) => {\r\n            state.cartItems = state.cartItems.filter(({title}) => title !== payload.title);\r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const {addToCart, delFromCart} = cartSlice.actions;\r\n\r\n\r\nexport const showCartItems = state => state.cartItems.cartItems;\r\n\r\n\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}