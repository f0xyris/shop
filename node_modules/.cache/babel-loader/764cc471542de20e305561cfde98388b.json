{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCart = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nexport const cartSlice = createSlice({\n  name: 'cartItems',\n  initialState: {\n    cartItems: initialCart\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      let newItem;\n      let oldItem;\n      const itemIndex = state.cartItems.findIndex(({\n        title\n      }) => title === payload.title);\n      const item = state.cartItems[itemIndex];\n\n      if (item) {\n        newItem = { ...payload,\n          count: item.count + 1,\n          price: parseInt(item.price++)\n        };\n      } else {\n        newItem = { ...payload,\n          count: 1\n        };\n      }\n\n      if (itemIndex >= 0) {\n        return {\n          cartItems: [...state.cartItems.slice(0, itemIndex), newItem, ...state.cartItems.slice(itemIndex + 1)]\n        };\n      }\n\n      state.cartItems.push(newItem);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    },\n    delCounter: (state, {\n      payload\n    }) => {\n      let newItem;\n      const itemIndex = state.cartItems.findIndex(({\n        title\n      }) => title === payload.title);\n      const item = state.cartItems[itemIndex];\n\n      if (payload.count > 1) {\n        if (item) {\n          newItem = { ...payload,\n            count: item.count - 1,\n            price: payload.price - payload.price\n          };\n        } else {\n          newItem = { ...payload,\n            count: 1\n          };\n        }\n\n        if (itemIndex >= 0) {\n          return {\n            cartItems: [...state.cartItems.slice(0, itemIndex), newItem, ...state.cartItems.slice(itemIndex + 1)]\n          };\n        }\n\n        state.cartItems.push(newItem);\n      } else {\n        state.cartItems = state.cartItems.filter(({\n          title\n        }) => title !== payload.title);\n      }\n\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    },\n    delFromCart: (state, {\n      payload\n    }) => {\n      state.cartItems = state.cartItems.filter(({\n        title\n      }) => title !== payload.title);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    }\n  }\n});\nexport const {\n  addToCart,\n  delFromCart,\n  delCounter\n} = cartSlice.actions;\nexport const showCartItems = state => state.cartItems.cartItems;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/antip/Desktop/study/shop/src/features/cart/cartSlice.js"],"names":["createSlice","initialCart","localStorage","getItem","JSON","parse","cartSlice","name","initialState","cartItems","reducers","addToCart","state","payload","newItem","oldItem","itemIndex","findIndex","title","item","count","price","parseInt","slice","push","setItem","stringify","delCounter","filter","delFromCart","actions","showCartItems","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAGA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAChBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADgB,GAEhB,EAFJ;AAIE,OAAO,MAAMG,SAAS,GAAGN,WAAW,CAAC;AACnCO,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAER;AADD,GAFqB;AAKnCS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC7B,UAAIC,OAAJ;AACA,UAAIC,OAAJ;AAEA,YAAMC,SAAS,GAAGJ,KAAK,CAACH,SAAN,CAAgBQ,SAAhB,CAA0B,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKL,OAAO,CAACK,KAAzD,CAAlB;AACA,YAAMC,IAAI,GAAGP,KAAK,CAACH,SAAN,CAAgBO,SAAhB,CAAb;;AAEA,UAAGG,IAAH,EAAS;AACLL,QAAAA,OAAO,GAAG,EACN,GAAGD,OADG;AAENO,UAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,GAAa,CAFd;AAGNC,UAAAA,KAAK,EAAEC,QAAQ,CAACH,IAAI,CAACE,KAAL,EAAD;AAHT,SAAV;AAKH,OAND,MAMO;AACHP,QAAAA,OAAO,GAAG,EACN,GAAGD,OADG;AAENO,UAAAA,KAAK,EAAE;AAFD,SAAV;AAIH;;AAED,UAAGJ,SAAS,IAAI,CAAhB,EAAmB;AACf,eAAO;AACHP,UAAAA,SAAS,EAAE,CACP,GAAGG,KAAK,CAACH,SAAN,CAAgBc,KAAhB,CAAsB,CAAtB,EAAyBP,SAAzB,CADI,EAEPF,OAFO,EAGP,GAAGF,KAAK,CAACH,SAAN,CAAgBc,KAAhB,CAAsBP,SAAS,GAAG,CAAlC,CAHI;AADR,SAAP;AAOH;;AAEDJ,MAAAA,KAAK,CAACH,SAAN,CAAgBe,IAAhB,CAAqBV,OAArB;AAEAZ,MAAAA,YAAY,CAACuB,OAAb,CAAqB,WAArB,EAAkCrB,IAAI,CAACsB,SAAL,CAAed,KAAK,CAACH,SAArB,CAAlC;AAEH,KAnCK;AAoCNkB,IAAAA,UAAU,EAAE,CAACf,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC9B,UAAIC,OAAJ;AACA,YAAME,SAAS,GAAGJ,KAAK,CAACH,SAAN,CAAgBQ,SAAhB,CAA0B,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKL,OAAO,CAACK,KAAzD,CAAlB;AACA,YAAMC,IAAI,GAAGP,KAAK,CAACH,SAAN,CAAgBO,SAAhB,CAAb;;AAEA,UAAGH,OAAO,CAACO,KAAR,GAAgB,CAAnB,EAAsB;AAClB,YAAGD,IAAH,EAAS;AACLL,UAAAA,OAAO,GAAG,EACN,GAAGD,OADG;AAENO,YAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,GAAa,CAFd;AAGNC,YAAAA,KAAK,EAAER,OAAO,CAACQ,KAAR,GAAgBR,OAAO,CAACQ;AAHzB,WAAV;AAKH,SAND,MAMO;AACHP,UAAAA,OAAO,GAAG,EACN,GAAGD,OADG;AAENO,YAAAA,KAAK,EAAE;AAFD,WAAV;AAIH;;AAED,YAAGJ,SAAS,IAAI,CAAhB,EAAmB;AACf,iBAAO;AACHP,YAAAA,SAAS,EAAE,CACP,GAAGG,KAAK,CAACH,SAAN,CAAgBc,KAAhB,CAAsB,CAAtB,EAAyBP,SAAzB,CADI,EAEPF,OAFO,EAGP,GAAGF,KAAK,CAACH,SAAN,CAAgBc,KAAhB,CAAsBP,SAAS,GAAG,CAAlC,CAHI;AADR,WAAP;AAOH;;AAEDJ,QAAAA,KAAK,CAACH,SAAN,CAAgBe,IAAhB,CAAqBV,OAArB;AACH,OAzBD,MAyBO;AACHF,QAAAA,KAAK,CAACH,SAAN,GAAkBG,KAAK,CAACH,SAAN,CAAgBmB,MAAhB,CAAuB,CAAC;AAACV,UAAAA;AAAD,SAAD,KAAaA,KAAK,KAAKL,OAAO,CAACK,KAAtD,CAAlB;AACH;;AACDhB,MAAAA,YAAY,CAACuB,OAAb,CAAqB,WAArB,EAAkCrB,IAAI,CAACsB,SAAL,CAAed,KAAK,CAACH,SAArB,CAAlC;AACH,KAtEK;AAuENoB,IAAAA,WAAW,EAAE,CAACjB,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC/BD,MAAAA,KAAK,CAACH,SAAN,GAAkBG,KAAK,CAACH,SAAN,CAAgBmB,MAAhB,CAAuB,CAAC;AAACV,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKL,OAAO,CAACK,KAAtD,CAAlB;AACAhB,MAAAA,YAAY,CAACuB,OAAb,CAAqB,WAArB,EAAkCrB,IAAI,CAACsB,SAAL,CAAed,KAAK,CAACH,SAArB,CAAlC;AACH;AA1EK;AALyB,CAAD,CAA7B;AAoFT,OAAO,MAAM;AAACE,EAAAA,SAAD;AAAYkB,EAAAA,WAAZ;AAAyBF,EAAAA;AAAzB,IAAuCrB,SAAS,CAACwB,OAAvD;AAGP,OAAO,MAAMC,aAAa,GAAGnB,KAAK,IAAIA,KAAK,CAACH,SAAN,CAAgBA,SAA/C;AAGP,eAAeH,SAAS,CAAC0B,OAAzB","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialCart = localStorage.getItem('cartItems')\r\n  ? JSON.parse(localStorage.getItem('cartItems'))\r\n  : []\r\n\r\n  export const cartSlice = createSlice({\r\n    name: 'cartItems',\r\n    initialState: {\r\n        cartItems: initialCart,\r\n    },\r\n    reducers: {\r\n        addToCart: (state, {payload}) => {\r\n            let newItem;\r\n            let oldItem;\r\n            \r\n            const itemIndex = state.cartItems.findIndex(({title}) => title === payload.title)\r\n            const item = state.cartItems[itemIndex]\r\n            \r\n            if(item) {\r\n                newItem = {\r\n                    ...payload,\r\n                    count: item.count + 1,\r\n                    price: parseInt(item.price++)\r\n                }\r\n            } else {\r\n                newItem = {\r\n                    ...payload, \r\n                    count: 1\r\n                }\r\n            }\r\n\r\n            if(itemIndex >= 0) {\r\n                return {\r\n                    cartItems: [\r\n                        ...state.cartItems.slice(0, itemIndex),\r\n                        newItem,\r\n                        ...state.cartItems.slice(itemIndex + 1)\r\n                    ]\r\n                }\r\n            } \r\n            \r\n            state.cartItems.push(newItem)\r\n            \r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems))\r\n            \r\n        },\r\n        delCounter: (state, {payload}) => {\r\n            let newItem;\r\n            const itemIndex = state.cartItems.findIndex(({title}) => title === payload.title)\r\n            const item = state.cartItems[itemIndex]\r\n\r\n            if(payload.count > 1) {\r\n                if(item) {\r\n                    newItem = {\r\n                        ...payload,\r\n                        count: item.count - 1,\r\n                        price: payload.price - payload.price\r\n                    }\r\n                } else {\r\n                    newItem = {\r\n                        ...payload, \r\n                        count: 1\r\n                    }\r\n                }\r\n\r\n                if(itemIndex >= 0) {\r\n                    return {\r\n                        cartItems: [\r\n                            ...state.cartItems.slice(0, itemIndex),\r\n                            newItem,\r\n                            ...state.cartItems.slice(itemIndex + 1)\r\n                        ]\r\n                    }\r\n                }\r\n            \r\n                state.cartItems.push(newItem)\r\n            } else {\r\n                state.cartItems = state.cartItems.filter(({title}) => title !== payload.title);\r\n            }\r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\r\n        },\r\n        delFromCart: (state, {payload}) => {\r\n            state.cartItems = state.cartItems.filter(({title}) => title !== payload.title);\r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const {addToCart, delFromCart, delCounter} = cartSlice.actions;\r\n\r\n\r\nexport const showCartItems = state => state.cartItems.cartItems;\r\n\r\n\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}