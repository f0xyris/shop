{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCart = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nexport const cartSlice = createSlice({\n  name: 'cartItems',\n  initialState: {\n    cartItems: initialCart\n  },\n  reducers: {\n    addToCart: (state, {\n      payload\n    }) => {\n      let newItem;\n      const itemIndex = state.cartItems.findIndex(({\n        title\n      }) => title === payload.title);\n      const item = state.cartItems[itemIndex];\n\n      if (item) {\n        newItem = { ...item,\n          count: item.count + 1,\n          price: item.price + payload.price\n        };\n      } else {\n        newItem = { ...payload,\n          count: 1\n        };\n      }\n\n      if (itemIndex >= 0) {\n        return { ...payload,\n          cartItems: [...state.cartItems.slice(0, itemIndex), newItem, ...state.cartItems.slice(itemIndex + 1)]\n        };\n      }\n\n      state.cartItems.push(newItem);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    },\n    delFromCart: (state, {\n      payload\n    }) => {\n      state.cartItems = state.cartItems.filter(({\n        title\n      }) => title !== payload.title);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n    }\n  }\n});\nexport const {\n  addToCart,\n  delFromCart\n} = cartSlice.actions;\nexport const showCartItems = state => state.cartItems.cartItems;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/antip/Desktop/study/shop/src/features/cart/cartSlice.js"],"names":["createSlice","initialCart","localStorage","getItem","JSON","parse","cartSlice","name","initialState","cartItems","reducers","addToCart","state","payload","newItem","itemIndex","findIndex","title","item","count","price","slice","push","setItem","stringify","delFromCart","filter","actions","showCartItems","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAChBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADgB,GAEhB,EAFJ;AAIE,OAAO,MAAMG,SAAS,GAAGN,WAAW,CAAC;AACnCO,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAER;AADD,GAFqB;AAKnCS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC7B,UAAIC,OAAJ;AACA,YAAMC,SAAS,GAAGH,KAAK,CAACH,SAAN,CAAgBO,SAAhB,CAA0B,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKJ,OAAO,CAACI,KAAzD,CAAlB;AACA,YAAMC,IAAI,GAAGN,KAAK,CAACH,SAAN,CAAgBM,SAAhB,CAAb;;AAEA,UAAGG,IAAH,EAAS;AACLJ,QAAAA,OAAO,GAAG,EACN,GAAGI,IADG;AAENC,UAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,GAAa,CAFd;AAGNC,UAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAaP,OAAO,CAACO;AAHtB,SAAV;AAKH,OAND,MAMO;AACHN,QAAAA,OAAO,GAAG,EACN,GAAGD,OADG;AAENM,UAAAA,KAAK,EAAE;AAFD,SAAV;AAIH;;AAED,UAAGJ,SAAS,IAAI,CAAhB,EAAmB;AACf,eAAO,EACH,GAAGF,OADA;AAEHJ,UAAAA,SAAS,EAAE,CACP,GAAGG,KAAK,CAACH,SAAN,CAAgBY,KAAhB,CAAsB,CAAtB,EAAyBN,SAAzB,CADI,EAEPD,OAFO,EAGP,GAAGF,KAAK,CAACH,SAAN,CAAgBY,KAAhB,CAAsBN,SAAS,GAAG,CAAlC,CAHI;AAFR,SAAP;AAQH;;AAEDH,MAAAA,KAAK,CAACH,SAAN,CAAgBa,IAAhB,CAAqBR,OAArB;AAEAZ,MAAAA,YAAY,CAACqB,OAAb,CAAqB,WAArB,EAAkCnB,IAAI,CAACoB,SAAL,CAAeZ,KAAK,CAACH,SAArB,CAAlC;AAEH,KAlCK;AAmCNgB,IAAAA,WAAW,EAAE,CAACb,KAAD,EAAQ;AAACC,MAAAA;AAAD,KAAR,KAAsB;AAC/BD,MAAAA,KAAK,CAACH,SAAN,GAAkBG,KAAK,CAACH,SAAN,CAAgBiB,MAAhB,CAAuB,CAAC;AAACT,QAAAA;AAAD,OAAD,KAAaA,KAAK,KAAKJ,OAAO,CAACI,KAAtD,CAAlB;AACAf,MAAAA,YAAY,CAACqB,OAAb,CAAqB,WAArB,EAAkCnB,IAAI,CAACoB,SAAL,CAAeZ,KAAK,CAACH,SAArB,CAAlC;AACH;AAtCK;AALyB,CAAD,CAA7B;AAgDT,OAAO,MAAM;AAACE,EAAAA,SAAD;AAAYc,EAAAA;AAAZ,IAA2BnB,SAAS,CAACqB,OAA3C;AAGP,OAAO,MAAMC,aAAa,GAAGhB,KAAK,IAAIA,KAAK,CAACH,SAAN,CAAgBA,SAA/C;AAGP,eAAeH,SAAS,CAACuB,OAAzB","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialCart = localStorage.getItem('cartItems')\r\n  ? JSON.parse(localStorage.getItem('cartItems'))\r\n  : []\r\n\r\n  export const cartSlice = createSlice({\r\n    name: 'cartItems',\r\n    initialState: {\r\n        cartItems: initialCart\r\n    },\r\n    reducers: {\r\n        addToCart: (state, {payload}) => {\r\n            let newItem;\r\n            const itemIndex = state.cartItems.findIndex(({title}) => title === payload.title)\r\n            const item = state.cartItems[itemIndex]\r\n            \r\n            if(item) {\r\n                newItem = {\r\n                    ...item,\r\n                    count: item.count + 1,\r\n                    price: item.price + payload.price\r\n                }\r\n            } else {\r\n                newItem = {\r\n                    ...payload, \r\n                    count: 1\r\n                }\r\n            }\r\n\r\n            if(itemIndex >= 0) {\r\n                return {\r\n                    ...payload,\r\n                    cartItems: [\r\n                        ...state.cartItems.slice(0, itemIndex),\r\n                        newItem,\r\n                        ...state.cartItems.slice(itemIndex + 1)\r\n                    ]\r\n                }\r\n            }\r\n\r\n            state.cartItems.push(newItem)\r\n            \r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems))\r\n            \r\n        },\r\n        delFromCart: (state, {payload}) => {\r\n            state.cartItems = state.cartItems.filter(({title}) => title !== payload.title);\r\n            localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const {addToCart, delFromCart} = cartSlice.actions;\r\n\r\n\r\nexport const showCartItems = state => state.cartItems.cartItems;\r\n\r\n\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}